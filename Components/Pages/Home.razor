@page "/"
@rendermode InteractiveServer

<PageTitle>Clientes - Home</PageTitle>

<h1>Clientes</h1>

<p>Consulte os seus Clientes cadastrados na sua Loja ou realize o cadastro de novos Clientes.</p>

@if (paginatedClientList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><input type="checkbox" @bind="checkedValue"></th>
                <th>Nome/Razão Social</th>
                <th>E-mail</th>
                <th>Telefone</th>
                <th>Data de cadastro</th>
                <th>Bloqueado</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in paginatedClientList)
            {
                <tr>
                    <td><input type="checkbox" @bind="client.Checked"></td>
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td>@client.Telephone</td>
                    <td>@client.RegisterDate.ToShortDateString()</td>
                    <td><input type="checkbox" @bind="client.Blocked"></td>
                    <td>@client.TemperatureC</td>
                </tr>
            }
        </tbody>
    </table>

    <div style="justify-content: center; display: flex">
        <input type="button" class="btn-lg btn" id="prev" @onclick="PrevPage" value="Previous"/>
        <span style="align-content: center">@CurPage</span>
        <input type="button" class="btn-lg btn" id="next" @onclick="NextPage" value="Next" />
    </div>
}

@code {

    protected int CurPage = 1;
    protected int Pagination = 5;
    protected Client[] fullClientList = DefineForecast();
    protected Client[]? paginatedClientList;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await ShowPage();        
    }

    protected async Task ShowPage()
    {
        paginatedClientList = fullClientList.ToList().GetRange(0 + Pagination * (CurPage - 1), Pagination).ToArray();
    }

    private static Client[] DefineForecast()
    {
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        return Enumerable.Range(1, 20).Select(index => new Client
            {
                RegisterDate = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Name = summaries[Random.Shared.Next(summaries.Length)],
                Telephone = $"({Random.Shared.Next(01, 27).ToString().PadLeft(2, '0')}) {Random.Shared.Next(90000, 99999)}-{Random.Shared.Next(1, 9999).ToString().PadLeft(4, '0')}",
                Email = summaries[Random.Shared.Next(summaries.Length)].ToLower() + "@" + summaries[Random.Shared.Next(summaries.Length)].ToLower() + ".com"
            }).ToArray();
    }

    protected async Task PrevPage()
    {
        if (CurPage > 1)
        {
            CurPage--;
            await ShowPage();
        }
    }

    protected async Task NextPage()
    {
        if (CurPage < fullClientList.Count() / Pagination)
        {
            CurPage++;
            await ShowPage();
        }
    }

    protected class Client
    {
        public DateOnly RegisterDate { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Telephone { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        public bool Checked { get; set; }
        public bool Blocked { get; set; }
    }

    public bool checkedValue { get; set; }
}